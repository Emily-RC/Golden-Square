def encode(text, key):
    cipher = make_cipher(key)
    print("The below prints cipher variable")  
    print(cipher)
   # Defining a function taking two args (text and key). 
    # Creating a variable "cipher" and passing key through 
    # a function that we define later (make_cipher)

  #The below function is Looping through ech letter and changing it into a different letter 
# Then appending that to a new list called ciphertext_chars 
    ciphertext_chars = []
    for i in text:
        ciphered_char = chr(65 + cipher.index(i))
        print(f"This prints {i}")
        ciphertext_chars.append(ciphered_char)
        #print("The below prints the ciphertext_chars variable")
        #print(ciphertext_chars)
    print("The below prints the completed ciphertext_chars list")
    print(ciphertext_chars)
    print("The below prints "".join(ciphertext_chars)")
    print("".join(ciphertext_chars))
    return "".join(ciphertext_chars)
  

#The below function reverses the encode function. It does this by looping through each item and appending the decoded character to a new list. It returns a string, created from a this list of decoded characters.

def decode(encrypted, key):
    cipher = make_cipher(key)

    plaintext_chars = []
    for i in encrypted:
        plain_char = cipher[65 - ord(i)]
        print("the below prints the plain_char character")
        print(plain_char)
        plaintext_chars.append(plain_char)

    print("The below prints "".join(plaintext_chars) ")
    print("".join(plaintext_chars))
    return "".join(plaintext_chars)


def make_cipher(key):
    alphabet = [chr(i + 97) for i in range(0, 26)]
    # We deduced that this line of code was potentially the issue having 
    # printed out various variables. 
    # We originally assumed the line of code was encoding the alphabet. We assumed i was relating to a letter and not an integer. 
    # It was in fact creating a variable called alphabet from a list of numbers: 
        # - range(0, 26): The range function generates a sequence of numbers starting from 0 (inclusive) up to 26 (exclusive). 
        # So, it will produce the numbers 0, 1, 2, ..., 25.
        # chr(i + 97): For each number i in the sequence generated by the range function, the expression chr(i + 97) is evaluated. 
        # The chr() function is used to convert an ASCII code (integer) to its corresponding character. 
        # In this case, i + 97 will give us the ASCII code for the lowercase English letters. ASCII code 97 represents the letter 'a', 98 represents 'b', and so on. 
        # Thus, for each number in the range, chr(i + 97) converts it to its corresponding lowercase letter.
        # for i in range(0, 26): This is a list comprehension, which is a compact way of creating lists in Python. 
        # It iterates through the sequence of numbers produced by range(0, 26) and applies the expression chr(i + 97) to each number, 
        # creating a new list with the lowercase English letters.
        # After executing this line of code, the alphabet list will contain all the lowercase letters of the English alphabet in order: ['a', 'b', 'c', ..., 'y', 'z'].
    print("the below is alphabet variable")  
    print(alphabet)
    print(len(alphabet))
    cipher_with_duplicates = list(key) + alphabet
    print("the below is cipher_with_duplicates variable")  
    print(cipher_with_duplicates)
    #print(len(cipher_with_duplicates))


    cipher = []
    for i in range(0, len(cipher_with_duplicates)):
        print(f"The item in this loop is {i}")
        if cipher_with_duplicates[i] not in cipher_with_duplicates[:i]:
            cipher.append(cipher_with_duplicates[i])

    print(f"The length of the cipher variable is {len(cipher)}")
    return cipher


print(encode("theswiftfoxjumpedoverthelazydog", "secretkey"))

# Expected: EMBAXNKEKSYOVQTBJSWBDEMBPHZGJSL
#   Actual: {encode('theswiftfoxjumpedoverthelazydog', 'secretkey')}
# """)